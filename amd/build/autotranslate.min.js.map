{"version":3,"file":"autotranslate.min.js","sources":["../src/autotranslate.js"],"sourcesContent":["define(['core/ajax', 'core/notification'], function (Ajax, Notification) {\n    /**\n     * Initializes the autotranslate and rebuild buttons.\n     */\n    function init() {\n        console.log('Autotranslate JavaScript module loaded and initialized.');\n\n        // Initialize the autotranslate button.\n        var autotranslateButton = document.getElementById('autotranslate-button');\n        if (autotranslateButton) {\n            console.log('Autotranslate button found:', autotranslateButton);\n            autotranslateButton.addEventListener('click', function () {\n                console.log('Autotranslate button clicked.');\n                var filterParams = JSON.parse(autotranslateButton.getAttribute('data-filter-params'));\n                startTask('filter_autotranslate_autotranslate', filterParams);\n            });\n        } else {\n            console.log('Autotranslate button not found.');\n        }\n\n        // Initialize the rebuild button.\n        var rebuildButton = document.getElementById('rebuild-button');\n        if (rebuildButton) {\n            console.log('Rebuild button found:', rebuildButton);\n            rebuildButton.addEventListener('click', function () {\n                console.log('Rebuild button clicked.');\n                var filterParams = JSON.parse(rebuildButton.getAttribute('data-filter-params'));\n                startTask('filter_autotranslate_rebuild_translations', { courseid: filterParams.courseid });\n            });\n        } else {\n            console.log('Rebuild button not found.');\n        }\n    }\n\n    /**\n     * Starts a task by calling the specified webservice.\n     *\n     * @param {string} methodname The webservice method to call.\n     * @param {object} params Parameters to pass to the webservice.\n     */\n    function startTask(methodname, params) {\n        // Disable both buttons.\n        var autotranslateButton = document.getElementById('autotranslate-button');\n        var rebuildButton = document.getElementById('rebuild-button');\n        if (autotranslateButton) {\n            autotranslateButton.setAttribute('disabled', 'disabled');\n        }\n        if (rebuildButton) {\n            rebuildButton.setAttribute('disabled', 'disabled');\n        }\n\n        // Show the progress bar.\n        var progressContainer = document.getElementById('task-progress');\n        progressContainer.style.display = 'block';\n        var progressBar = progressContainer.querySelector('.progress-bar');\n        progressBar.classList.remove('bg-danger'); // Reset any previous failure state\n        progressBar.classList.add('bg-primary'); // Set to default blue\n        progressBar.style.width = '0%';\n        progressBar.setAttribute('aria-valuenow', '0');\n        progressBar.textContent = '0%';\n\n        // Call the webservice to queue the task.\n        Ajax.call([{\n            methodname: methodname,\n            args: params,\n            done: function (response) {\n                if (response.success && response.taskid) {\n                    Notification.addNotification({\n                        message: 'Task queued successfully. Please wait for completion.',\n                        type: 'success'\n                    });\n                    pollTaskStatus(response.taskid);\n                } else {\n                    Notification.addNotification({\n                        message: response.message || 'Failed to queue task.',\n                        type: 'error'\n                    });\n                    resetUI();\n                }\n            },\n            fail: function (error) {\n                Notification.addNotification({\n                    message: 'Error queuing task: ' + error.message,\n                    type: 'error'\n                });\n                resetUI();\n            }\n        }]);\n    }\n\n    /**\n     * Polls the task status and updates the progress bar.\n     *\n     * @param {number} taskid The ID of the task to poll.\n     */\n    function pollTaskStatus(taskid) {\n        Ajax.call([{\n            methodname: 'filter_autotranslate_task_status',\n            args: { taskid: taskid },\n            done: function (response) {\n                var progressBar = document.querySelector('#task-progress .progress-bar');\n                if (progressBar) {\n                    progressBar.style.width = response.percentage + '%';\n                    progressBar.setAttribute('aria-valuenow', response.percentage);\n                    progressBar.textContent = response.percentage + '%';\n\n                    // If the task failed, change the progress bar to red.\n                    if (response.status === 'failed') {\n                        progressBar.classList.remove('bg-primary');\n                        progressBar.classList.add('bg-danger');\n                    }\n                }\n\n                if (response.status === 'completed') {\n                    Notification.addNotification({\n                        message: 'Task completed successfully. Reloading page...',\n                        type: 'success'\n                    });\n                    setTimeout(function () {\n                        location.reload();\n                    }, 1000);\n                } else if (response.status === 'failed') {\n                    Notification.addNotification({\n                        message: 'Task failed. Please check logs for details.',\n                        type: 'error'\n                    });\n                    resetUI();\n                } else {\n                    // Continue polling.\n                    setTimeout(function () {\n                        pollTaskStatus(taskid);\n                    }, 5000); // Poll every 5 seconds.\n                }\n            },\n            fail: function (error) {\n                Notification.addNotification({\n                    message: 'Error checking task status: ' + error.message,\n                    type: 'error'\n                });\n                var progressBar = document.querySelector('#task-progress .progress-bar');\n                if (progressBar) {\n                    progressBar.classList.remove('bg-primary');\n                    progressBar.classList.add('bg-danger');\n                }\n                resetUI();\n            }\n        }]);\n    }\n\n    /**\n     * Resets the UI after a task completes or fails.\n     */\n    function resetUI() {\n        var autotranslateButton = document.getElementById('autotranslate-button');\n        var rebuildButton = document.getElementById('rebuild-button');\n        if (autotranslateButton) {\n            autotranslateButton.removeAttribute('disabled');\n        }\n        if (rebuildButton) {\n            rebuildButton.removeAttribute('disabled');\n        }\n\n        var progressContainer = document.getElementById('task-progress');\n        progressContainer.style.display = 'none';\n        var progressBar = progressContainer.querySelector('.progress-bar');\n        if (progressBar) {\n            progressBar.style.width = '0%';\n            progressBar.setAttribute('aria-valuenow', '0');\n            progressBar.textContent = '0%';\n        }\n    }\n\n    return {\n        init: init\n    };\n});"],"names":["define","Ajax","Notification","startTask","methodname","params","autotranslateButton","document","getElementById","rebuildButton","setAttribute","progressContainer","style","display","progressBar","querySelector","classList","remove","add","width","textContent","call","args","done","response","success","taskid","addNotification","message","type","pollTaskStatus","resetUI","fail","error","percentage","status","setTimeout","location","reload","removeAttribute","init","console","log","addEventListener","JSON","parse","getAttribute","courseid"],"mappings":"AAAAA,4CAAO,CAAC,YAAa,sBAAsB,SAAUC,KAAMC,uBAwC9CC,UAAUC,WAAYC,YAEvBC,oBAAsBC,SAASC,eAAe,wBAC9CC,cAAgBF,SAASC,eAAe,kBACxCF,qBACAA,oBAAoBI,aAAa,WAAY,YAE7CD,eACAA,cAAcC,aAAa,WAAY,gBAIvCC,kBAAoBJ,SAASC,eAAe,iBAChDG,kBAAkBC,MAAMC,QAAU,YAC9BC,YAAcH,kBAAkBI,cAAc,iBAClDD,YAAYE,UAAUC,OAAO,aAC7BH,YAAYE,UAAUE,IAAI,cAC1BJ,YAAYF,MAAMO,MAAQ,KAC1BL,YAAYJ,aAAa,gBAAiB,KAC1CI,YAAYM,YAAc,KAG1BnB,KAAKoB,KAAK,CAAC,CACPjB,WAAYA,WACZkB,KAAMjB,OACNkB,KAAM,SAAUC,UACRA,SAASC,SAAWD,SAASE,QAC7BxB,aAAayB,gBAAgB,CACzBC,QAAS,wDACTC,KAAM,YAEVC,eAAeN,SAASE,UAExBxB,aAAayB,gBAAgB,CACzBC,QAASJ,SAASI,SAAW,wBAC7BC,KAAM,UAEVE,YAGRC,KAAM,SAAUC,OACZ/B,aAAayB,gBAAgB,CACzBC,QAAS,uBAAyBK,MAAML,QACxCC,KAAM,UAEVE,uBAUHD,eAAeJ,QACpBzB,KAAKoB,KAAK,CAAC,CACPjB,WAAY,mCACZkB,KAAM,CAAEI,OAAQA,QAChBH,KAAM,SAAUC,cACRV,YAAcP,SAASQ,cAAc,gCACrCD,cACAA,YAAYF,MAAMO,MAAQK,SAASU,WAAa,IAChDpB,YAAYJ,aAAa,gBAAiBc,SAASU,YACnDpB,YAAYM,YAAcI,SAASU,WAAa,IAGxB,WAApBV,SAASW,SACTrB,YAAYE,UAAUC,OAAO,cAC7BH,YAAYE,UAAUE,IAAI,eAIV,cAApBM,SAASW,QACTjC,aAAayB,gBAAgB,CACzBC,QAAS,iDACTC,KAAM,YAEVO,YAAW,WACPC,SAASC,WACV,MACwB,WAApBd,SAASW,QAChBjC,aAAayB,gBAAgB,CACzBC,QAAS,8CACTC,KAAM,UAEVE,WAGAK,YAAW,WACPN,eAAeJ,UAChB,MAGXM,KAAM,SAAUC,OACZ/B,aAAayB,gBAAgB,CACzBC,QAAS,+BAAiCK,MAAML,QAChDC,KAAM,cAENf,YAAcP,SAASQ,cAAc,gCACrCD,cACAA,YAAYE,UAAUC,OAAO,cAC7BH,YAAYE,UAAUE,IAAI,cAE9Ba,uBAQHA,cACDzB,oBAAsBC,SAASC,eAAe,wBAC9CC,cAAgBF,SAASC,eAAe,kBACxCF,qBACAA,oBAAoBiC,gBAAgB,YAEpC9B,eACAA,cAAc8B,gBAAgB,gBAG9B5B,kBAAoBJ,SAASC,eAAe,iBAChDG,kBAAkBC,MAAMC,QAAU,WAC9BC,YAAcH,kBAAkBI,cAAc,iBAC9CD,cACAA,YAAYF,MAAMO,MAAQ,KAC1BL,YAAYJ,aAAa,gBAAiB,KAC1CI,YAAYM,YAAc,YAI3B,CACHoB,gBAxKAC,QAAQC,IAAI,+DAGRpC,oBAAsBC,SAASC,eAAe,wBAC9CF,qBACAmC,QAAQC,IAAI,8BAA+BpC,qBAC3CA,oBAAoBqC,iBAAiB,SAAS,WAC1CF,QAAQC,IAAI,iCAEZvC,UAAU,qCADSyC,KAAKC,MAAMvC,oBAAoBwC,aAAa,4BAInEL,QAAQC,IAAI,uCAIZjC,cAAgBF,SAASC,eAAe,kBACxCC,eACAgC,QAAQC,IAAI,wBAAyBjC,eACrCA,cAAckC,iBAAiB,SAAS,WACpCF,QAAQC,IAAI,2BAEZvC,UAAU,4CAA6C,CAAE4C,SADtCH,KAAKC,MAAMpC,cAAcqC,aAAa,uBACuBC,eAGpFN,QAAQC,IAAI"}